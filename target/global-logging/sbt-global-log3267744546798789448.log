[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\MAKS\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\MAKS\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 11.0.4)
[debug]       Load.loadUnit: plugins took 83.7085ms
[debug]       Load.loadUnit: defsScala took 0.2445ms
[debug] [Loading] Scanning directory C:\Users\MAKS\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\MAKS\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 14.1512 ms
[debug]           Load.resolveProject(global-plugins) took 45.813ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\MAKS\.sbt\1.0\plugins, plugins: List(<none>))) took 88.7847ms
[debug] [Loading] Done in C:\Users\MAKS\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 106.2867ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2166ms
[debug]     Load.loadUnit(file:/C:/Users/MAKS/.sbt/1.0/plugins/, ...) took 198.0576ms
[debug]   Load.apply: load took 357.294ms
[debug]   Load.apply: resolveProjects took 5.2559ms
[debug]   Load.apply: finalTransforms took 63.7373ms
[debug]   Load.apply: config.delegates took 8.2441ms
[debug]   Load.apply: Def.make(settings)... took 423.3822ms
[debug]   Load.apply: structureIndex took 99.728ms
[debug]   Load.apply: mkStreams took 1.543ms
[info] loading global plugins from C:\Users\MAKS\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2637.5037ms
[debug]           Load.loadUnit: plugins took 23.5754ms
[debug]           Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\MAKS\Desktop\performance-testing-master\project
[debug]             Load.loadUnit: mkEval took 6.877ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\MAKS\Desktop\performance-testing-master\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.9112 ms
[info] loading settings for project performance-testing-master-build from plugins.sbt,idea.sbt ...
[debug]               Load.resolveProject(performance-testing-master-build) took 5.3047ms
[debug]             Load.loadTransitive: finalizeProject(Project(id performance-testing-master-build, base: C:\Users\MAKS\Desktop\performance-testing-master\project, plugins: List(<none>))) took 9.1111ms
[debug] [Loading] Done in C:\Users\MAKS\Desktop\performance-testing-master\project, returning: (performance-testing-master-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3104.9474ms
[debug]           Load.loadUnit: cleanEvalClasses took 11.716ms
[debug]         Load.loadUnit(file:/C:/Users/MAKS/Desktop/performance-testing-master/project/, ...) took 3141.5869ms
[debug]       Load.apply: load took 3144.1059ms
[debug]       Load.apply: resolveProjects took 0.17ms
[debug]       Load.apply: finalTransforms took 20.6282ms
[debug]       Load.apply: config.delegates took 0.6936ms
[debug]       Load.apply: Def.make(settings)... took 122.0403ms
[debug]       Load.apply: structureIndex took 42.8922ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\MAKS\Desktop\performance-testing-master\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6895.7453ms
[debug]     Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory C:\Users\MAKS\Desktop\performance-testing-master
[debug]       Load.loadUnit: mkEval took 0.305ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\MAKS\Desktop\performance-testing-master, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(io.gatling.sbt.GatlingPlugin), Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(io.gatling.sbt.GatlingPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,io.gatling.sbt.GatlingPlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.4933 ms
[info] loading settings for project performance-testing-master from build.sbt ...
[debug]         Load.resolveProject(performance-testing-master) took 65.7406ms
[debug]       Load.loadTransitive: finalizeProject(Project(id performance-testing-master, base: C:\Users\MAKS\Desktop\performance-testing-master, plugins: List(<none>))) took 71.6915ms
[debug] [Loading] Done in C:\Users\MAKS\Desktop\performance-testing-master, returning: (performance-testing-master)
[debug]     Load.loadUnit: loadedProjectsRaw took 1913.86ms
[debug]     Load.loadUnit: cleanEvalClasses took 35.6344ms
[debug]   Load.loadUnit(file:/C:/Users/MAKS/Desktop/performance-testing-master/, ...) took 8846.2273ms
[debug] Load.apply: load took 8849.3913ms
[debug] Load.apply: resolveProjects took 0.2089ms
[debug] Load.apply: finalTransforms took 50.465ms
[debug] Load.apply: config.delegates took 0.8634ms
[debug] Load.apply: Def.make(settings)... took 124.1197ms
[debug] Load.apply: structureIndex took 40.7838ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to pt (in build file:/C:/Users/MAKS/Desktop/performance-testing-master/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63931 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63931, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to pt (in build file:/C:/Users/MAKS/Desktop/performance-testing-master/)
[debug] > Exec(idea-shell, None, None)
